// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef MRARTICLEMETADATA_ODB_HXX
#define MRARTICLEMETADATA_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "mrarticlemetadata.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // MRArticleMetaData
  //
  template <>
  struct class_traits< ::MRArticleMetaData >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::MRArticleMetaData >
  {
    public:
    typedef ::MRArticleMetaData object_type;
    typedef ::MRArticleMetaData* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // MRArticleMetaData
  //
  template <typename A>
  struct query_columns< ::MRArticleMetaData, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // pages
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    pages_type_;

    static const pages_type_ pages;

    // title
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    title_type_;

    static const title_type_ title;

    // relative_path
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    relative_path_type_;

    static const relative_path_type_ relative_path;

    // author
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    author_type_;

    static const author_type_ author;

    // publisher
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    publisher_type_;

    static const publisher_type_ publisher;

    // isbn
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    isbn_type_;

    static const isbn_type_ isbn;

    // year
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    year_type_;

    static const year_type_ year;
  };

  template <typename A>
  const typename query_columns< ::MRArticleMetaData, id_sqlite, A >::id_type_
  query_columns< ::MRArticleMetaData, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::MRArticleMetaData, id_sqlite, A >::pages_type_
  query_columns< ::MRArticleMetaData, id_sqlite, A >::
  pages (A::table_name, "\"pages\"", 0);

  template <typename A>
  const typename query_columns< ::MRArticleMetaData, id_sqlite, A >::title_type_
  query_columns< ::MRArticleMetaData, id_sqlite, A >::
  title (A::table_name, "\"title\"", 0);

  template <typename A>
  const typename query_columns< ::MRArticleMetaData, id_sqlite, A >::relative_path_type_
  query_columns< ::MRArticleMetaData, id_sqlite, A >::
  relative_path (A::table_name, "\"relative_path\"", 0);

  template <typename A>
  const typename query_columns< ::MRArticleMetaData, id_sqlite, A >::author_type_
  query_columns< ::MRArticleMetaData, id_sqlite, A >::
  author (A::table_name, "\"author\"", 0);

  template <typename A>
  const typename query_columns< ::MRArticleMetaData, id_sqlite, A >::publisher_type_
  query_columns< ::MRArticleMetaData, id_sqlite, A >::
  publisher (A::table_name, "\"publisher\"", 0);

  template <typename A>
  const typename query_columns< ::MRArticleMetaData, id_sqlite, A >::isbn_type_
  query_columns< ::MRArticleMetaData, id_sqlite, A >::
  isbn (A::table_name, "\"isbn\"", 0);

  template <typename A>
  const typename query_columns< ::MRArticleMetaData, id_sqlite, A >::year_type_
  query_columns< ::MRArticleMetaData, id_sqlite, A >::
  year (A::table_name, "\"year\"", 0);

  template <typename A>
  struct pointer_query_columns< ::MRArticleMetaData, id_sqlite, A >:
    query_columns< ::MRArticleMetaData, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::MRArticleMetaData, id_sqlite >:
    public access::object_traits< ::MRArticleMetaData >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _id
      //
      long long _id_value;
      bool _id_null;

      // _pages
      //
      long long _pages_value;
      bool _pages_null;

      // _title
      //
      details::buffer _title_value;
      std::size_t _title_size;
      bool _title_null;

      // _relative_path
      //
      details::buffer _relative_path_value;
      std::size_t _relative_path_size;
      bool _relative_path_null;

      // _author
      //
      details::buffer _author_value;
      std::size_t _author_size;
      bool _author_null;

      // _publisher
      //
      details::buffer _publisher_value;
      std::size_t _publisher_size;
      bool _publisher_null;

      // _isbn
      //
      details::buffer _isbn_value;
      std::size_t _isbn_size;
      bool _isbn_null;

      // _year
      //
      details::buffer _year_value;
      std::size_t _year_size;
      bool _year_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::MRArticleMetaData, id_common >:
    public access::object_traits_impl< ::MRArticleMetaData, id_sqlite >
  {
  };

  // MRArticleMetaData
  //
}

#include "mrarticlemetadata-odb.ixx"

#include <odb/post.hxx>

#endif // MRARTICLEMETADATA_ODB_HXX
